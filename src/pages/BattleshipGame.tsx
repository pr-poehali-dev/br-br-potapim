
import { useState, useEffect } from 'react';
import { Button } from '../components/ui/button';
import { BattleGrid } from '../components/BattleGrid';
import { GameStatus } from '../components/GameStatus';

const BattleshipGame = () => {
  const [playerGrid, setPlayerGrid] = useState<number[][]>(Array(10).fill(0).map(() => Array(10).fill(0)));
  const [computerGrid, setComputerGrid] = useState<number[][]>(Array(10).fill(0).map(() => Array(10).fill(0)));
  const [playerShots, setPlayerShots] = useState<number[][]>(Array(10).fill(0).map(() => Array(10).fill(0)));
  const [computerShots, setComputerShots] = useState<number[][]>(Array(10).fill(0).map(() => Array(10).fill(0)));
  const [isGameStarted, setIsGameStarted] = useState(false);
  const [gameMessage, setGameMessage] = useState('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–æ—Ä—Å–∫–æ–π –±–æ–π!');
  const [playerTurn, setPlayerTurn] = useState(true);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ —Å–ª—É—á–∞–π–Ω—ã–º–∏ –∫–æ—Ä–∞–±–ª—è–º–∏
  const initializeComputerGrid = () => {
    const newGrid = Array(10).fill(0).map(() => Array(10).fill(0));
    
    // –†–∞–∑–º–µ—Å—Ç–∏–º 1 –∫–æ—Ä–∞–±–ª—å —Ä–∞–∑–º–µ—Ä–æ–º 4 –∫–ª–µ—Ç–∫–∏
    placeRandomShip(newGrid, 4);
    
    // –†–∞–∑–º–µ—Å—Ç–∏–º 2 –∫–æ—Ä–∞–±–ª—è —Ä–∞–∑–º–µ—Ä–æ–º 3 –∫–ª–µ—Ç–∫–∏
    placeRandomShip(newGrid, 3);
    placeRandomShip(newGrid, 3);
    
    // –†–∞–∑–º–µ—Å—Ç–∏–º 3 –∫–æ—Ä–∞–±–ª—è —Ä–∞–∑–º–µ—Ä–æ–º 2 –∫–ª–µ—Ç–∫–∏
    placeRandomShip(newGrid, 2);
    placeRandomShip(newGrid, 2);
    placeRandomShip(newGrid, 2);
    
    setComputerGrid(newGrid);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–æ—Ä–∞–±–ª—è
  const placeRandomShip = (grid: number[][], size: number) => {
    let placed = false;
    
    while (!placed) {
      const horizontal = Math.random() > 0.5;
      const row = Math.floor(Math.random() * 10);
      const col = Math.floor(Math.random() * 10);
      
      if (canPlaceShip(grid, row, col, size, horizontal)) {
        placeShip(grid, row, col, size, horizontal);
        placed = true;
      }
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∫–æ—Ä–∞–±–ª—å
  const canPlaceShip = (grid: number[][], row: number, col: number, size: number, horizontal: boolean) => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–∞ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
    if (horizontal) {
      if (col + size > 10) return false;
    } else {
      if (row + size > 10) return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å –¥—Ä—É–≥–∏–º–∏ –∫–æ—Ä–∞–±–ª—è–º–∏ (–≤–∫–ª—é—á–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª–∏)
    for (let i = -1; i <= size; i++) {
      for (let j = -1; j <= 1; j++) {
        let r = horizontal ? row + j : row + i;
        let c = horizontal ? col + i : col + j;
        
        if (r >= 0 && r < 10 && c >= 0 && c < 10) {
          if (i >= 0 && i < size) {
            if (horizontal && j === 0 && grid[r][c] === 1) return false;
            if (!horizontal && j === 0 && grid[r][c] === 1) return false;
          } else if (grid[r][c] === 1) {
            return false;
          }
        }
      }
    }
    
    return true;
  };

  // –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª—è –Ω–∞ —Å–µ—Ç–∫–µ
  const placeShip = (grid: number[][], row: number, col: number, size: number, horizontal: boolean) => {
    for (let i = 0; i < size; i++) {
      if (horizontal) {
        grid[row][col + i] = 1;
      } else {
        grid[row + i][col] = 1;
      }
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —è—á–µ–π–∫–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
  const handlePlayerShot = (row: number, col: number) => {
    if (!isGameStarted || !playerTurn || playerShots[row][col] !== 0) return;
    
    const newPlayerShots = [...playerShots];
    
    if (computerGrid[row][col] === 1) {
      newPlayerShots[row][col] = 2; // –ü–æ–ø–∞–¥–∞–Ω–∏–µ
      setGameMessage('–ü–æ–ø–∞–¥–∞–Ω–∏–µ!');
    } else {
      newPlayerShots[row][col] = 1; // –ü—Ä–æ–º–∞—Ö
      setGameMessage('–ü—Ä–æ–º–∞—Ö!');
      setPlayerTurn(false);
      
      // –•–æ–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
      setTimeout(() => {
        computerTurn();
      }, 1000);
    }
    
    setPlayerShots(newPlayerShots);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–±–µ–¥—É
    if (checkVictory(newPlayerShots, computerGrid)) {
      setGameMessage('–í—ã –ø–æ–±–µ–¥–∏–ª–∏! üéâ');
      setIsGameStarted(false);
    }
  };

  // –•–æ–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
  const computerTurn = () => {
    let row, col;
    let validShot = false;
    
    // –ö–æ–º–ø—å—é—Ç–µ—Ä –≤—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —è—á–µ–π–∫—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –µ—â–µ –Ω–µ —Å—Ç—Ä–µ–ª—è–ª
    while (!validShot) {
      row = Math.floor(Math.random() * 10);
      col = Math.floor(Math.random() * 10);
      
      if (computerShots[row][col] === 0) {
        validShot = true;
      }
    }
    
    const newComputerShots = [...computerShots];
    
    if (playerGrid[row][col] === 1) {
      newComputerShots[row][col] = 2; // –ü–æ–ø–∞–¥–∞–Ω–∏–µ
      setGameMessage('–ö–æ–º–ø—å—é—Ç–µ—Ä –ø–æ–ø–∞–ª!');
    } else {
      newComputerShots[row][col] = 1; // –ü—Ä–æ–º–∞—Ö
      setGameMessage('–ö–æ–º–ø—å—é—Ç–µ—Ä –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è!');
      setPlayerTurn(true);
    }
    
    setComputerShots(newComputerShots);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–±–µ–¥—É –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
    if (checkVictory(newComputerShots, playerGrid)) {
      setGameMessage('–ö–æ–º–ø—å—é—Ç–µ—Ä –ø–æ–±–µ–¥–∏–ª! üòî');
      setIsGameStarted(false);
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–±–µ–¥—É
  const checkVictory = (shots: number[][], targetGrid: number[][]) => {
    for (let i = 0; i < 10; i++) {
      for (let j = 0; j < 10; j++) {
        if (targetGrid[i][j] === 1 && shots[i][j] !== 2) {
          return false;
        }
      }
    }
    return true;
  };

  // –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª–µ–π –∏–≥—Ä–æ–∫–∞ (–¥–ª—è –¥–µ–º–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ)
  const placePlayerShips = () => {
    const newGrid = Array(10).fill(0).map(() => Array(10).fill(0));
    
    placeRandomShip(newGrid, 4);
    placeRandomShip(newGrid, 3);
    placeRandomShip(newGrid, 3);
    placeRandomShip(newGrid, 2);
    placeRandomShip(newGrid, 2);
    placeRandomShip(newGrid, 2);
    
    setPlayerGrid(newGrid);
  };

  // –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
  const startGame = () => {
    setPlayerShots(Array(10).fill(0).map(() => Array(10).fill(0)));
    setComputerShots(Array(10).fill(0).map(() => Array(10).fill(0)));
    placePlayerShips();
    initializeComputerGrid();
    setGameMessage('–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –í–∞—à —Ö–æ–¥.');
    setPlayerTurn(true);
    setIsGameStarted(true);
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold text-center mb-8">–ú–æ—Ä—Å–∫–æ–π –±–æ–π</h1>
      
      <GameStatus message={gameMessage} playerTurn={playerTurn} isGameStarted={isGameStarted} />
      
      <div className="flex flex-col md:flex-row justify-center gap-8 mb-8">
        <div className="w-full md:w-1/2">
          <h2 className="text-xl font-semibold mb-2 text-center">–í–∞—à–∞ –¥–æ—Å–∫–∞</h2>
          <BattleGrid 
            grid={playerGrid} 
            shots={computerShots} 
            onCellClick={() => {}} 
            showShips={true}
          />
        </div>
        
        <div className="w-full md:w-1/2">
          <h2 className="text-xl font-semibold mb-2 text-center">–î–æ—Å–∫–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞</h2>
          <BattleGrid 
            grid={computerGrid} 
            shots={playerShots} 
            onCellClick={handlePlayerShot} 
            showShips={false}
          />
        </div>
      </div>
      
      <div className="flex justify-center">
        <Button 
          className="px-8 py-2 bg-purple-600 hover:bg-purple-700 text-white font-bold rounded-md transition-colors"
          onClick={startGame}
          disabled={isGameStarted}
        >
          {isGameStarted ? '–ò–¥–µ—Ç –∏–≥—Ä–∞...' : '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É'}
        </Button>
      </div>
    </div>
  );
};

export default BattleshipGame;
